%% Louis Ye, Oct 2025
clc
clear
close all

%% Read Damper/Spring Plots
frontSpringCurve = [0,1;0,78800]; % linear 450lbf/in
rearSpringCurve = [0,1;0,70500]; % linear 400lbf/in

damperTable = readtable("DamperTable.xlsx","Sheet","Multimatic_DSSV_VC01"); % Change damper plots here

frontDamperCurve = SetDamperClick(damperTable,6,6); % (table, compression, rebound)
rearDamperCurve = SetDamperClick(damperTable,6,6);


%% Single Run
% run = SingleRun(frontDamperCurve, rearDamperCurve, frontSpringCurve, rearSpringCurve);
% results = CalculateKPI(run);

% % Plot Data
% t = run.tout;
% frontCPL = run.logsout.get("Front CPL").Values.Data;
% rearCPL = run.logsout.get("Rear CPL").Values.Data;
% frontBodyDisplacement = run.logsout.get("Front Body Displacement").Values.Data;
% rearBodyDisplacement = run.logsout.get("Rear Body Displacement").Values.Data;
% 
% figure
% plot(t, frontCPL);
% hold on
% plot(t, rearCPL);
% xlim([1,30]);
% xlabel("time, s");
% ylabel("Contact Patch Loads, N");
% title("Contact Patch Load");
% 
% figure
% plot(t, frontCPL - mean(frontCPL(100:end)));
% hold on
% plot(t, rearCPL - mean(rearCPL(100:end)));
% xlim([1,30]);
% xlabel("time, s");
% ylabel("Contact Patch Load Variation, N");
% title("Contact Patch Load Variation");
% 
% 
% figure
% plot(t, frontBodyDisplacement);
% hold on
% plot(t, rearBodyDisplacement);
% xlim([1,30]);
% xlabel("Front Body Displacement, m");
% ylabel("Rear Body Displacement, m");
% title("Car Body Displacement");

%% Damper Settings Sweep
for front = 1:11
    for rear = 1:11
        frontDamperCurve = SetDamperClick(damperTable, front, front);
        rearDamperCurve = SetDamperClick(damperTable, rear, rear);
        run = SingleRun(frontDamperCurve, rearDamperCurve, frontSpringCurve, rearSpringCurve);
        sweepResults(front,rear) = CalculateKPI(run);
    end
end


%% Functions
function dampercurve = SetDamperClick(table, compression, rebound)
    array = table2array(table);
    dampercurve(1,:) = array(1,2:end)./1000;
    zero = find(~dampercurve(1,:));
    dampercurve(2,:) = array(rebound+1,2:end);
    dampercurve(2,1:zero-1) = array(compression+1,2:zero);
end

function result = SingleRun(frontDamperCurve, rearDamperCurve, frontSpringCurve, rearSpringCurve)
    simInput = Simulink.SimulationInput("HalfCarModel");

    simInput = simInput.setVariable("ax", 0);
    
    simInput = simInput.setVariable("f_damper_curve_x",frontDamperCurve(1,:));
    simInput = simInput.setVariable("f_damper_curve_y",frontDamperCurve(2,:));
    
    simInput = simInput.setVariable("r_damper_curve_x",rearDamperCurve(1,:));
    simInput = simInput.setVariable("r_damper_curve_y",rearDamperCurve(2,:));
    
    simInput = simInput.setVariable("f_spring_curve_x",frontSpringCurve(1,:));
    simInput = simInput.setVariable("f_spring_curve_y",frontSpringCurve(2,:));
    
    simInput = simInput.setVariable("r_spring_curve_x",rearSpringCurve(1,:));
    simInput = simInput.setVariable("r_spring_curve_y",rearSpringCurve(2,:));
%% run sim
    result = sim(simInput);
end

function KPI = CalculateKPI(result)
    frontCPL = result.logsout.get("Front CPL").Values.Data;
    rearCPL = result.logsout.get("Rear CPL").Values.Data;

    frontBodyDisplacement = result.logsout.get("Front Body Displacement").Values.Data;
    rearBodyDisplacement = result.logsout.get("Rear Body Displacement").Values.Data;

    frontHubDisplacement = result.logsout.get("Front Hub Displacement").Values.Data;
    rearHubDisplacement = result.logsout.get("Rear Hub Displacement").Values.Data;
    
    % KPI math
    % normalize cpl
    frontNominalCPL = mean(frontCPL(100:end)); % during the first 100 samples car is being dropped lol, might fix later
    rearNominalCPL = mean(rearCPL(100:end));
    % contact patch load variation
    frontCPLV = (frontCPL - frontNominalCPL)./frontNominalCPL; % variation as percent of nominal wheel load
    rearCPLV = (rearCPL - rearNominalCPL)./rearNominalCPL;
    
    % body & hub pitch
    bodyPitch = asin(1.53/(frontBodyDisplacement - rearBodyDisplacement)); % head up is positive
    hubPitch = asin(1.53/(frontHubDisplacement - rearHubDisplacement));
    
    KPI.frontMinCPL = 1-min(frontCPL(100:end))/frontNominalCPL;
    KPI.rearMinCPL = 1-min(rearCPL(100:end))/rearNominalCPL;
    KPI.frontCPLVRMS = rms(frontCPLV);
    KPI.rearCPLVRMS = rms(rearCPLV);
    KPI.bodyPitchRMS = rms(bodyPitch);
    KPI.hubPitchRMS = rms(hubPitch);
    
end